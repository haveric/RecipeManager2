package haveric.recipeManager.flag.flags.any.meta;

import haveric.recipeManager.ErrorReporter;
import haveric.recipeManager.Files;
import haveric.recipeManager.common.RMCChatColor;
import haveric.recipeManager.common.util.RMCUtil;
import haveric.recipeManager.flag.Flag;
import haveric.recipeManager.flag.FlagType;
import haveric.recipeManager.flag.args.Args;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

public class FlagItemName extends Flag {

    @Override
    public String getFlagType() {
        return FlagType.ITEM_NAME;
    }

    @Override
    protected String[] getArguments() {
        return new String[] {
            "{flag} <text>", };
    }

    @Override
    protected String[] getDescription() {
        return new String[] {
            "Changes result's name.",
            "",
            "Supports colors (e.g. <red>, <blue>, &4, &F, etc).",
            "",
            "You can also use these variables:",
            "  {player}         = crafter's name or '(nobody)' if not available",
            "  {playerdisplay}  = crafter's display name or '(nobody)' if not available",
            "  {result}         = the result item name or '(nothing)' if recipe failed.",
            "  {recipename}     = recipe's custom or autogenerated name or '(unknown)' if not available",
            "  {recipetype}     = recipe type or '(unknown)' if not available",
            "  {inventorytype}  = inventory type or '(unknown)' if not available",
            "  {world}          = world name of event location or '(unknown)' if not available",
            "  {x}              = event location's X coord or '(?)' if not available",
            "  {y}              = event location's Y coord or '(?)' if not available",
            "  {z}              = event location's Z coord or '(?)' if not available",
            "    Relative positions are supported: {x-1},{y+7},{z+12}",
            "  {rand #1-#2}     = output a random integer between #1 and #2. Example: {rand 5-10} will output an integer from 5-10",
            "  {rand #1-#2, #3} = output a random number between #1 and #2, with decimal places of #3. Example: {rand 1.5-2.5, 2} will output a number from 1.50 to 2.50",
            "  {rand n}         = reuse a random output, where n is the nth {rand} in a recipe used excluding this format",
            "",
            "Allows quotes to prevent spaces being trimmed.", };
    }

    @Override
    protected String[] getExamples() {
        return new String[] {
            "{flag} <light_purple>Weird Item",
            "{flag} <yellow>{player}'s Sword",
            "{flag} \"  Extra space  \" // Quotes at the beginning and end will be removed, but spaces will be kept.", };
    }


    private String itemName;

    public FlagItemName() {
    }

    public FlagItemName(FlagItemName flag) {
        super(flag);
        itemName = flag.itemName;
    }

    @Override
    public FlagItemName clone() {
        return new FlagItemName((FlagItemName) super.clone());
    }

    @Override
    public boolean requiresRecipeManagerModification() {
        return false;
    }

    public String getItemName() {
        return itemName;
    }

    public void setItemName(String newName) {
        itemName = newName;
    }

    public String getPrintName() {
        return itemName;
    }

    @Override
    public boolean onParse(String value, String fileName, int lineNum, int restrictedBit) {
        super.onParse(value, fileName, lineNum, restrictedBit);
        // Match on single pipes '|', but not double '||'
        String[] args = value.split("(?<!\\|)\\|(?!\\|)");
        String name = args[0];

        // Replace double pipes with single pipe: || -> |
        name = name.replaceAll("\\|\\|", "|");
        name = RMCUtil.trimExactQuotes(name);
        name = RMCUtil.parseColors(name, false);

        itemName = name;

        if (args.length > 1) {
            String display = args[1].trim().toLowerCase();
            if (display.equals("display") || display.equals("result")) {
                ErrorReporter.getInstance().warning("Flag " + getFlagType() + " has invalid argument: " + args[1] + RMCChatColor.RESET + ". Flag does not support display or result arguments. You likely want to use " + FlagType.DISPLAY_NAME + " instead as it was renamed.");
                return false;
            }
        }

        return true;
    }

    @Override
    public void onPrepare(Args a) {
        if (canAddMeta(a)) {
            String name;
            if (itemName == null) {
                name = null;
            } else {
                name = a.parseVariables(itemName, true);
            }

            setMetaName(a, name);
        }
    }

    @Override
    public void onCrafted(Args a) {
        if (canAddMeta(a)) {
            String name;
            if (itemName == null) {
                name = null;
            } else {
                name = a.parseVariables(itemName);
            }

            setMetaName(a, name);
        }
    }

    private void setMetaName(Args a, String name) {
        ItemMeta meta = a.result().getItemMeta();
        if (meta != null) {
            meta.setItemName(name);

            a.result().setItemMeta(meta);
        }
    }

    @Override
    public int hashCode() {
        String toHash = "" + super.hashCode();

        toHash += "itemName: " + itemName;

        return toHash.hashCode();
    }

    @Override
    public void parseItemMeta(ItemStack item, ItemMeta meta, StringBuilder recipeString) {
        if (meta != null && meta.hasItemName()) {
            recipeString.append(Files.NL).append("@itemname ").append(meta.getItemName());
        }
    }
}
